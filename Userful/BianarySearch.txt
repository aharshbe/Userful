/**
 * Created by austin on 6/9/16.
 */

public class GraemeSearch {
    static int[] nums = {1, 2, 3, 4, 5, 6};
    //this version uses a for loop and doesn't need the start and end passed to it.
    static int search(int[] arr, int findMe) {
        int start = 0;
        int end = arr.length;
        //we know that findMe isn't in the array if the start and end are the same.
        while (start != end) {
            //get the middle index of arr.â€‹

            int middle = (start + end) / 2;
            System.out.println(start:  + start +  end:  + end +  middle:  + middle);
            //if the middle is a match, we're done, return it.
            if (arr[middle] == findMe) return middle;
            //is find me in the first half of arr or the second?
            boolean inFirstHalf = arr[middle] > findMe;
            //adjust the start and end based on what half arr we want to look at next.
            start = inFirstHalf ? start : middle + 1;
            end = inFirstHalf ? middle : end;
        }
        //no match, sad day.
        return -1;
    }
    //this version uses recursion and needs the start and end to be passed to it,
    //it can then modify the start and end and call itself.
    static int search(int[] arr, int findMe, int start, int end) {
        if (start == end) return -1;
        int middle = (start + end) / 2;
        System.out.println(start:  + start +  end:  + end +  middle:  + middle);
        if (arr[middle] == findMe) return middle;
        boolean inFirstHalf = arr[middle] > findMe;
        start = inFirstHalf ? start : middle + 1;
        end = inFirstHalf ? middle : end;
        return search(arr, findMe, start, end);
    }
    public static void main(String[] args) {
        //use the for loop method.
        System.out.println(search(nums, 6));
      
        //use the recursion method.
        System.out.println(search(nums, 6, 0, nums.length));
    }
}


